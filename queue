    using System;
    public class Node
    {
        public int number;
        public Node next;
        public Node()
        {
            number = 0;
            next = null;
        }
        public Node(int a_number)
        {
            number = a_number;
            next = null;
        }
        public Node AddHead(int value)
        {
            Node newNode = new Node(value);
            newNode.next = this;
            return newNode;
        }
        public Node AddLast(int value)
        {
            Node newNode = new Node(value);
            next = newNode;
            return newNode;
        }
        public int GetValue()
        {
            return number;
        }
        public Node GetNext()
        {
            return next;
        }
    }

    public class LinkedList
    {
        public Node head;
        public Node tail;
        public LinkedList()
        {
            head = null;
            tail = null;
        }
        public void AddHead(int value)
        {
            if(head == null)
            {
                head = new Node(value);
                tail = head;
            }
            else
                head = head.AddHead(value);
        }
        public void AddLast(int value)
        {
            if(head == null)
            {
                head = new Node(value);
                tail = head;
            }
            else
                tail = tail.AddLast(value);
        }
        public int GetHead()
        {
            if(head == null)
                Console.WriteLine("LinkedList is empty");
            return head.GetValue();
        }
        public int GetLast()
        {
            if(head == null)
                Console.WriteLine("LinkedList is empty");
            return tail.GetValue();
        }
        public void RemoveHead()
        {
            if(head == null)
                Console.WriteLine("LinkedList is empty");
            head = head.GetNext();
        }
        public void RemoveTail()
        {
            if (head == null)
                Console.WriteLine("LinkedList is empty");
            if (head.next == null)
                RemoveHead();
            Node second_last = head; 
            while (second_last.next.next != null) 
                second_last = second_last.next; 
            second_last.next = null; 
        }
        public bool IsEmpty()
        {
            return head == null;
        }
    }

    public class Queue
    {
        public LinkedList list;
        public Queue()
        {
            list = new LinkedList();
        }
        public void Push(int value)
        {
            list.AddLast(value);
        }
        public int Pop()
        {
            int value = list.GetHead();
            list.RemoveHead();
            return value;
        }
        public bool IsEmpty()
        {
            return list.IsEmpty();
        }
        public bool IsFull()
        {
            return false;
        }
        public int Peak()
        {
            return list.GetHead();
        }
    }
    
    public class Stack
    {
        public LinkedList list;
        public Stack()
        {
            list = new LinkedList();
        }
        public void Push(int value)
        {
            list.AddLast(value);
        }
        public int Pop()
        {
            int value = list.GetLast();
            list.RemoveTail();
            return value;
        }
        public bool IsEmpty()
        {
            return list.IsEmpty();
        }
        public bool IsFull()
        {
            return false;
        }
        public int Peak()
        {
            return list.GetHead();
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            Queue queue = new Queue();
            queue.Push(10);
            queue.Push(30);
            queue.Push(100);
            Console.WriteLine($"Head of Queue: {queue.Peak()}");
            while(!queue.IsEmpty())
                Console.WriteLine(queue.Pop());
            Console.ReadLine();
            
            Stack stack = new Stack();
            stack.Push(10);
            stack.Push(30);
            stack.Push(100);
            Console.WriteLine($"Head of Stack: {stack.Peak()}");
            while(!stack.IsEmpty())
                Console.WriteLine(stack.Pop());
            Console.ReadLine();
        }
    }
